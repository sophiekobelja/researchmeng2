//
// Policy file with minimal set of permissions to run derby's
// functional tests.
//
// The test harness sets up three variables used by this policy file
//
// derbyTesting.codejar - URL to the jar files when they are in the classpath
// derbyTesting.codeclasses - URL to the classes directory when it is in the classpath
//
// Only one of derbyTesting.codejar and derbyTesting.codeclasses will be valid, the
// other will be set to a bogus URL like file://unused
//
// derbyTesting.codedir - File location of either derbyTesting.codejar or derbyTesting.codeclasses.
// Only required due to a BUG (see below for more info).
//
// 
// derbyTesting.serverhost - Host name or ip where network server is started 
// derbyTesting.clienthost - specifies the clients ip address/hostName. 
//     when testing with networkserver on a remote host, this needs to be passed in 
//     with the NetworkServerControl start command

//
// Permissions for the embedded engine (derby.jar)
//
grant codeBase "${derbyTesting.codejar}derby.jar" {
  permission java.util.PropertyPermission "derby.*", "read";
  
  // for unit tests
  permission java.util.PropertyPermission "derbyTesting.unittest.*", "read";
  
  permission java.lang.RuntimePermission "createClassLoader";
  
  permission java.io.FilePermission "${derby.system.home}${/}derby.properties", "read";
  permission java.io.FilePermission "${derby.system.home}${/}derby.log", "read, write, delete";
  permission java.io.FilePermission "${derby.system.home}", "read";
  
  // all databases under derby.system.home 
  permission java.io.FilePermission "${derby.system.home}${/}-", "read, write, delete";

  // Import/export and other support files from these locations in tests
  permission java.io.FilePermission "${user.dir}${/}extin${/}-", "read";
  permission java.io.FilePermission "${user.dir}${/}extinout${/}-", "read, write";
  permission java.io.FilePermission "${user.dir}${/}extout${/}-", "write";
  permission java.io.FilePermission "${user.dir}${/}extinout", "read,write";
  
  // unit tests (e.g. store/T_RecoverFullLog) set this property 
  // (called from derbyTesting.jar through code in derby.jar)
  permission java.util.PropertyPermission "derbyTesting.unittest.*", "write";

  // BUG DERBY-622 derbynet/sysinfo.java
  permission java.io.FilePermission "${derbyTesting.codedir}${/}*", "read";
  
  // sane=true, jdbcapi/secureUsers1.sql
  permission java.io.FilePermission "${user.dir}${/}CloudLDAP.out", "write"; 
  
  // These permissions are needed to load the JCE for encryption with Sun and IBM JDK131.
  // JDK14 has the JCE  preloaded
  permission java.security.SecurityPermission "insertProvider.SunJCE";
  permission java.security.SecurityPermission "insertProvider.IBMJCE";
 
};

//
// Permissions for the network server (derbynet.jar)
//
grant codeBase "${derbyTesting.codejar}derbynet.jar" {
  
  // accept is needed for the server accepting connections
  // connect is needed for ping command (which is in the server jar)
  permission java.net.SocketPermission "127.0.0.1", "accept,connect";
  permission java.net.SocketPermission "localhost", "accept,connect";
  permission java.net.SocketPermission "${derbyTesting.clienthost}", "accept,connect";
  permission java.net.SocketPermission "${derbyTesting.serverhost}", "accept,connect";
  
  // derbynet/NSinSameJVM uses this addres for its serverControl 
  permission java.net.SocketPermission "0.0.0.0:20000", "connect";
  
    
  // tracing files default to derby.system.home, derbynet/getCurrentProperties.java 
  permission java.io.FilePermission "${derby.system.home}${/}*", "write";  
  
  // BUG DERBY-622 derbynet/sysinfo.java
  permission java.io.FilePermission "${derbyTesting.codedir}${/}*", "read";
  
  // BUG DERBY-616 lang/wisconsin.sql & jdbcapi/maxfieldsize.java
  permission java.io.FilePermission "${derby.system.home}${/}wombat${/}tmp${/}-", "read, write, delete";
  // BUG DERBY-616/DERBY-943 lang/syscat.sql with ibm142. 
  permission java.io.FilePermission "${derby.system.home}${/}syscatdb${/}tmp${/}-", "read, write, delete";
  
  // BUG DERBY-623 - sane=true
  permission java.util.PropertyPermission "derby.monitor.verbose", "read";
  permission java.util.PropertyPermission "derby.debug.*", "read";
  
  // sane=true, jdbcapi/secureUsers1.sql
  permission java.io.FilePermission "${user.dir}${/}CloudLDAP.out", "write"; 


};

//
// Permissions for the network client (derbyclient.jar)
//
grant codeBase "${derbyTesting.codejar}derbyclient.jar" {
  permission java.net.SocketPermission "127.0.0.1", "connect,resolve";
  permission java.net.SocketPermission "localhost", "connect,resolve";
  permission java.net.SocketPermission "${derbyTesting.serverhost}", "connect,resolve";
};

//
// Permissions for the tools (derbytools.jar)
// Ideally this would be more secure, for now the
// focus is on getting the engine & network server secure.
//
grant codeBase "${derbyTesting.codejar}derbytools.jar" {
  // Access all properties using System.getProperties
  permission java.util.PropertyPermission "*", "read, write";
  
  // Read all files under ${user.dir}
  permission java.io.FilePermission "${user.dir}${/}-", "read";
  
  // ij needs permission to read the sql files in this jar
  permission java.io.FilePermission "${derbyTesting.codedir}${/}derbyTesting.jar", "read";
  
  // sane=true, jdbcapi/secureUsers1.sql
  permission java.io.FilePermission "${user.dir}${/}CloudLDAP.out", "write"; 
};

//
// Permissions for the tests (derbyTesting.jar)
// We are liberal here, it's not a goal to make the test harness
// or tests secure.
//
grant codeBase "${derbyTesting.codejar}derbyTesting.jar" {
  // Access all properties using System.getProperties
  permission java.util.PropertyPermission "*", "read, write";
  
  // Access all files under ${user.dir}to write the test directory structure
  permission java.io.FilePermission "${user.dir}${/}-", "read,write,delete"; 
 
  // When running with useprocess=false need to install and uninstall
  // the security manager.
  permission java.lang.RuntimePermission "setSecurityManager";
  
  // lang/errorStream.java
  permission java.lang.RuntimePermission "setIO";
  
};

//
// super-set of the jar permissions for running out of the classes directory
//
grant codeBase "${derbyTesting.codeclasses}" {
  // Access all properties using System.getProperties
  permission java.util.PropertyPermission "*", "read, write";
  
  permission java.util.PropertyPermission "derby.*", "read";
  permission java.lang.RuntimePermission "createClassLoader";
   
  permission java.io.FilePermission "${derby.system.home}${/}derby.properties", "read";
  permission java.io.FilePermission "${derby.system.home}${/}derby.log", "read, write, delete";
  permission java.io.FilePermission "${derby.system.home}", "read";
  permission java.io.FilePermission "${derby.system.home}${/}-", "read, write, delete";

  // combination of client and server side.
  permission java.net.SocketPermission "127.0.0.1", "accept,connect,resolve";
  permission java.net.SocketPermission "localhost", "accept,connect,resolve";
  permission java.net.SocketPermission "${derbyTesting.clienthost}", "accept,connect";
  permission java.net.SocketPermission "${derbyTesting.serverhost}", "connect,resolve";
  
  // derbynet/NSinSameJVM uses this addres for its serverControl 
  permission java.net.SocketPermission "0.0.0.0:20000", "connect";
  
  // Access all files under ${user.dir}to write the test directory structure
  // Also covers extin, extout and extinout locations
  permission java.io.FilePermission "${user.dir}${/}-", "read,write,delete"; 
  
  // When running with useprocess=false need to install and uninstall
  // the security manager.
  permission java.lang.RuntimePermission "setSecurityManager";
    
  // sane=true, jdbcapi/secureUsers1.sql
  permission java.io.FilePermission "${user.dir}${/}CloudLDAP.out", "write"; 
  
  // These permissions are needed to load the JCE for encryption with Sun and IBM JDK131.
  // JDK14 has the JCE  preloaded
  permission java.security.SecurityPermission "insertProvider.SunJCE";
  permission java.security.SecurityPermission "insertProvider.IBMJCE";
  
  // lang/errorStream.java
  permission java.lang.RuntimePermission "setIO";
  
};

// JUnit jar file tries to read junit.properties in the user's
// home directory and seems to require permission to read the
// property user.home as well.
// Ideally these would be granted to junit.jar only but currently
// the jar may be anyway on a file system. Could expand the test harness
// to look for junit.jar on the classpath as it done for the Derby jars.
// The exposure in making these properties grantable to all is somewhat low,
// though reading the property user.home is a little troubling.
grant {
    permission java.util.PropertyPermission "user.home", "read";
    permission java.io.FilePermission "${user.home}${/}junit.properties", "read";
};


